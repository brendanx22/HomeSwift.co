import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import {
  Bell,
  Plus,
  Search,
  MapPin,
  DollarSign,
  Home,
  Calendar,
  Trash2,
  Edit3,
  Check,
  X,
  Filter
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { supabase } from '../lib/supabaseClient';
import { toast } from 'react-hot-toast';

const PropertyAlerts = () => {
  const { user, isAuthenticated } = useAuth();
  const [alerts, setAlerts] = useState([]);
  const [isCreating, setIsCreating] = useState(false);
  const [editingAlert, setEditingAlert] = useState(null);
  const [loading, setLoading] = useState(true);

  // Form state for creating/editing alerts
  const [alertForm, setAlertForm] = useState({
    name: '',
    location: '',
    minPrice: '',
    maxPrice: '',
    propertyType: '',
    bedrooms: '',
    bathrooms: '',
    frequency: 'daily', // daily, weekly, instant
    isActive: true
  });

  useEffect(() => {
    if (isAuthenticated && user?.id) {
      loadAlerts();
    }
  }, [isAuthenticated, user?.id]);

  const loadAlerts = async () => {
    try {
      setLoading(true);

      // For now, we'll use mock data since the alerts table might not exist yet
      // In a real implementation, this would query the saved_searches table
      const mockAlerts = [
        {
          id: 1,
          name: 'Lagos Apartments',
          location: 'Lagos',
          minPrice: 500000,
          maxPrice: 2000000,
          propertyType: 'apartment',
          bedrooms: 2,
          bathrooms: 1,
          frequency: 'daily',
          isActive: true,
          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7), // 1 week ago
          lastTriggered: new Date(Date.now() - 1000 * 60 * 60 * 2) // 2 hours ago
        },
        {
          id: 2,
          name: 'Luxury Houses in VI',
          location: 'Victoria Island',
          minPrice: 5000000,
          maxPrice: 20000000,
          propertyType: 'house',
          bedrooms: 4,
          bathrooms: 3,
          frequency: 'weekly',
          isActive: true,
          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 14), // 2 weeks ago
          lastTriggered: new Date(Date.now() - 1000 * 60 * 60 * 24 * 3) // 3 days ago
        }
      ];

      setAlerts(mockAlerts);
    } catch (error) {
      console.error('Error loading alerts:', error);
      toast.error('Failed to load property alerts');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateAlert = async () => {
    try {
      if (!alertForm.name.trim()) {
        toast.error('Please enter a name for your alert');
        return;
      }

      const newAlert = {
        id: Date.now(), // In real app, this would be generated by database
        ...alertForm,
        createdAt: new Date(),
        lastTriggered: null,
        user_id: user.id
      };

      setAlerts(prev => [...prev, newAlert]);
      setIsCreating(false);
      setAlertForm({
        name: '',
        location: '',
        minPrice: '',
        maxPrice: '',
        propertyType: '',
        bedrooms: '',
        bathrooms: '',
        frequency: 'daily',
        isActive: true
      });

      toast.success('Property alert created successfully!');
    } catch (error) {
      console.error('Error creating alert:', error);
      toast.error('Failed to create property alert');
    }
  };

  const handleUpdateAlert = async () => {
    try {
      setAlerts(prev =>
        prev.map(alert =>
          alert.id === editingAlert.id
            ? { ...alert, ...alertForm }
            : alert
        )
      );

      setEditingAlert(null);
      setAlertForm({
        name: '',
        location: '',
        minPrice: '',
        maxPrice: '',
        propertyType: '',
        bedrooms: '',
        bathrooms: '',
        frequency: 'daily',
        isActive: true
      });

      toast.success('Property alert updated successfully!');
    } catch (error) {
      console.error('Error updating alert:', error);
      toast.error('Failed to update property alert');
    }
  };

  const handleDeleteAlert = async (alertId) => {
    try {
      setAlerts(prev => prev.filter(alert => alert.id !== alertId));
      toast.success('Property alert deleted');
    } catch (error) {
      console.error('Error deleting alert:', error);
      toast.error('Failed to delete property alert');
    }
  };

  const toggleAlertStatus = async (alertId) => {
    try {
      setAlerts(prev =>
        prev.map(alert =>
          alert.id === alertId
            ? { ...alert, isActive: !alert.isActive }
            : alert
        )
      );
    } catch (error) {
      console.error('Error toggling alert status:', error);
      toast.error('Failed to update alert status');
    }
  };

  const startEditing = (alert) => {
    setEditingAlert(alert);
    setAlertForm({
      name: alert.name,
      location: alert.location,
      minPrice: alert.minPrice || '',
      maxPrice: alert.maxPrice || '',
      propertyType: alert.propertyType || '',
      bedrooms: alert.bedrooms || '',
      bathrooms: alert.bathrooms || '',
      frequency: alert.frequency,
      isActive: alert.isActive
    });
  };

  const cancelEditing = () => {
    setEditingAlert(null);
    setAlertForm({
      name: '',
      location: '',
      minPrice: '',
      maxPrice: '',
      propertyType: '',
      bedrooms: '',
      bathrooms: '',
      frequency: 'daily',
      isActive: true
    });
  };

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <Bell className="w-16 h-16 text-gray-400 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Login Required</h2>
          <p className="text-gray-600 mb-6">Please log in to manage property alerts</p>
        </div>
      </div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="min-h-screen bg-gray-50"
    >
      {/* Header */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-6 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div>
                <h1 className="text-3xl font-bold text-gray-900 mb-2">Property Alerts</h1>
                <p className="text-gray-600">Get notified when new properties match your criteria</p>
              </div>
            </div>
            <button
              onClick={() => setIsCreating(true)}
              className="flex items-center space-x-2 bg-[#FF6B35] text-white px-6 py-3 rounded-lg hover:bg-orange-600 transition-colors"
            >
              <Plus className="w-5 h-5" />
              <span>Create Alert</span>
            </button>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-6 py-8">
        {loading ? (
          <div className="flex items-center justify-center py-12">
            <div className="animate-spin rounded-full h-12 w-12 border-4 border-gray-300 border-t-[#FF6B35]"></div>
          </div>
        ) : alerts.length === 0 ? (
          <div className="text-center py-12">
            <Bell className="w-16 h-16 text-gray-400 mx-auto mb-6" />
            <h3 className="text-2xl font-semibold text-gray-900 mb-4">No Property Alerts</h3>
            <p className="text-gray-600 mb-8 max-w-md mx-auto">
              Create alerts to get notified when new properties match your saved search criteria.
            </p>
            <button
              onClick={() => setIsCreating(true)}
              className="bg-[#FF6B35] text-white px-6 py-3 rounded-lg hover:bg-orange-600 transition-colors"
            >
              Create Your First Alert
            </button>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {alerts.map((alert) => (
              <motion.div
                key={alert.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="bg-white rounded-lg shadow-sm border border-gray-200 p-6"
              >
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-3">
                    <div className={`w-3 h-3 rounded-full ${alert.isActive ? 'bg-green-500' : 'bg-gray-400'}`} />
                    <h3 className="font-semibold text-gray-900">{alert.name}</h3>
                  </div>
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => startEditing(alert)}
                      className="text-gray-400 hover:text-gray-600 transition-colors"
                    >
                      <Edit3 className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => handleDeleteAlert(alert.id)}
                      className="text-gray-400 hover:text-red-600 transition-colors"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>

                <div className="space-y-3 mb-4">
                  {alert.location && (
                    <div className="flex items-center text-sm text-gray-600">
                      <MapPin className="w-4 h-4 mr-2" />
                      <span>{alert.location}</span>
                    </div>
                  )}

                  {(alert.minPrice || alert.maxPrice) && (
                    <div className="flex items-center text-sm text-gray-600">
                      <DollarSign className="w-4 h-4 mr-2" />
                      <span>
                        ₦{alert.minPrice?.toLocaleString() || '0'} - ₦{alert.maxPrice?.toLocaleString() || '∞'}
                      </span>
                    </div>
                  )}

                  <div className="flex items-center text-sm text-gray-600">
                    <Home className="w-4 h-4 mr-2" />
                    <span className="capitalize">{alert.propertyType || 'Any type'}</span>
                  </div>

                  {(alert.bedrooms || alert.bathrooms) && (
                    <div className="flex items-center text-sm text-gray-600">
                      <span>{alert.bedrooms || 0} bed • {alert.bathrooms || 0} bath</span>
                    </div>
                  )}
                </div>

                <div className="flex items-center justify-between text-sm text-gray-500">
                  <span className="capitalize">{alert.frequency} alerts</span>
                  {alert.lastTriggered && (
                    <span>Last: {new Date(alert.lastTriggered).toLocaleDateString()}</span>
                  )}
                </div>

                <div className="mt-4">
                  <button
                    onClick={() => toggleAlertStatus(alert.id)}
                    className={`w-full py-2 px-4 rounded-lg text-sm font-medium transition-colors ${
                      alert.isActive
                        ? 'bg-green-100 text-green-800 hover:bg-green-200'
                        : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                    }`}
                  >
                    {alert.isActive ? 'Active' : 'Paused'}
                  </button>
                </div>
              </motion.div>
            ))}
          </div>
        )}

        {/* Create/Edit Alert Modal */}
        {(isCreating || editingAlert) && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto"
            >
              <div className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-bold text-gray-900">
                    {editingAlert ? 'Edit Alert' : 'Create Property Alert'}
                  </h2>
                  <button
                    onClick={() => {
                      setIsCreating(false);
                      setEditingAlert(null);
                      cancelEditing();
                    }}
                    className="text-gray-400 hover:text-gray-600 transition-colors"
                  >
                    <X className="w-6 h-6" />
                  </button>
                </div>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Alert Name
                    </label>
                    <input
                      type="text"
                      value={alertForm.name}
                      onChange={(e) => setAlertForm(prev => ({ ...prev, name: e.target.value }))}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF6B35] focus:border-transparent"
                      placeholder="e.g., Lagos Apartments"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Location
                    </label>
                    <input
                      type="text"
                      value={alertForm.location}
                      onChange={(e) => setAlertForm(prev => ({ ...prev, location: e.target.value }))}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF6B35] focus:border-transparent"
                      placeholder="e.g., Lagos, Victoria Island"
                    />
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Min Price (₦)
                      </label>
                      <input
                        type="number"
                        value={alertForm.minPrice}
                        onChange={(e) => setAlertForm(prev => ({ ...prev, minPrice: e.target.value }))}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF6B35] focus:border-transparent"
                        placeholder="500000"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Max Price (₦)
                      </label>
                      <input
                        type="number"
                        value={alertForm.maxPrice}
                        onChange={(e) => setAlertForm(prev => ({ ...prev, maxPrice: e.target.value }))}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF6B35] focus:border-transparent"
                        placeholder="2000000"
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Property Type
                      </label>
                      <select
                        value={alertForm.propertyType}
                        onChange={(e) => setAlertForm(prev => ({ ...prev, propertyType: e.target.value }))}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF6B35] focus:border-transparent"
                      >
                        <option value="">Any Type</option>
                        <option value="apartment">Apartment</option>
                        <option value="house">House</option>
                        <option value="condo">Condo</option>
                        <option value="townhouse">Townhouse</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Frequency
                      </label>
                      <select
                        value={alertForm.frequency}
                        onChange={(e) => setAlertForm(prev => ({ ...prev, frequency: e.target.value }))}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF6B35] focus:border-transparent"
                      >
                        <option value="instant">Instant</option>
                        <option value="daily">Daily</option>
                        <option value="weekly">Weekly</option>
                      </select>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Bedrooms
                      </label>
                      <select
                        value={alertForm.bedrooms}
                        onChange={(e) => setAlertForm(prev => ({ ...prev, bedrooms: e.target.value }))}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF6B35] focus:border-transparent"
                      >
                        <option value="">Any</option>
                        <option value="1">1+</option>
                        <option value="2">2+</option>
                        <option value="3">3+</option>
                        <option value="4">4+</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Bathrooms
                      </label>
                      <select
                        value={alertForm.bathrooms}
                        onChange={(e) => setAlertForm(prev => ({ ...prev, bathrooms: e.target.value }))}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF6B35] focus:border-transparent"
                      >
                        <option value="">Any</option>
                        <option value="1">1+</option>
                        <option value="2">2+</option>
                        <option value="3">3+</option>
                      </select>
                    </div>
                  </div>
                </div>

                <div className="flex space-x-3 mt-6">
                  <button
                    onClick={editingAlert ? handleUpdateAlert : handleCreateAlert}
                    className="flex-1 bg-[#FF6B35] text-white py-3 px-6 rounded-lg hover:bg-orange-600 transition-colors"
                  >
                    {editingAlert ? 'Update Alert' : 'Create Alert'}
                  </button>
                  <button
                    onClick={() => {
                      setIsCreating(false);
                      setEditingAlert(null);
                      cancelEditing();
                    }}
                    className="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </div>
    </motion.div>
  );
};

export default PropertyAlerts;
